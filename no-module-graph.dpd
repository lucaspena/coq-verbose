N: 73 "AddZero" [body=yes, kind=cnst, prop=yes, ];
N: 72 "AddZero'" [body=yes, kind=cnst, prop=yes, ];
N: 64 "AndCom" [body=yes, kind=cnst, prop=yes, ];
N: 63 "AndCom'" [body=yes, kind=cnst, prop=yes, ];
N: 71 "AndComm" [body=yes, kind=cnst, prop=yes, ];
N: 70 "AndComm'" [body=yes, kind=cnst, prop=yes, ];
N: 69 "AndComm''" [body=yes, kind=cnst, prop=yes, ];
N: 76 "False_ind" [body=yes, kind=cnst, prop=yes, ];
N: 75 "add_ind'" [body=yes, kind=cnst, prop=no, ];
N: 90 "and'_ind" [body=yes, kind=cnst, prop=yes, ];
N: 89 "and'_rec" [body=yes, kind=cnst, prop=no, ];
N: 91 "and'_rect" [body=yes, kind=cnst, prop=no, ];
N: 66 "and_ind" [body=yes, kind=cnst, prop=no, ];
N: 65 "and_rec" [body=yes, kind=cnst, prop=no, ];
N: 67 "and_rect'" [body=yes, kind=cnst, prop=no, ];
N: 86 "ex1_ind" [body=yes, kind=cnst, prop=yes, ];
N: 83 "ex2_ind" [body=yes, kind=cnst, prop=yes, ];
N: 80 "ex3_ind" [body=yes, kind=cnst, prop=yes, ];
N: 77 "ex4_ind" [body=yes, kind=cnst, prop=yes, ];
N: 74 "nat_ind'" [body=yes, kind=cnst, prop=yes, ];
N: 68 "test" [body=yes, kind=cnst, prop=no, ];
N: 93 "and'" [kind=inductive, prop=no, ];
N: 88 "ex1" [kind=inductive, prop=no, ];
N: 85 "ex2" [kind=inductive, prop=no, ];
N: 82 "ex3" [kind=inductive, prop=no, ];
N: 79 "ex4" [kind=inductive, prop=no, ];
N: 92 "conj'" [kind=construct, prop=yes, ];
N: 87 "ex_intro1" [kind=construct, prop=yes, ];
N: 84 "ex_intro2" [kind=construct, prop=yes, ];
N: 81 "ex_intro3" [kind=construct, prop=yes, ];
N: 78 "ex_intro4" [kind=construct, prop=yes, ];
E: 69 70 [weight=1, ];
E: 77 79 [weight=4, ];
E: 80 82 [weight=4, ];
E: 83 85 [weight=4, ];
E: 86 88 [weight=4, ];
E: 89 91 [weight=1, ];
E: 89 93 [weight=1, ];
E: 90 93 [weight=4, ];
E: 91 93 [weight=4, ];
