MLCoq.AddZero
     : forall n : nat, @eq nat (Nat.add n O) n
MLCoq.AndCom
     : forall (A B : Prop) (_ : and A B), and B A
MLCoq.AndCom'
     : forall (A B : Prop) (_ : and A B), and B A
MLCoq.AndComm
     : forall (A B : Prop) (_ : and A B), and B A
MLCoq.AndComm'
     : forall (A B : Prop) (_ : and A B), and B A
MLCoq.AndComm''
     : forall (A B : Prop) (_ : and A B), and B A
MLCoq.False_ind
     : forall (P : Prop) (_ : False), P
MLCoq.add_ind'
     : forall (_ : nat) (_ : nat), nat
MLCoq.and'_ind
     : forall (A B P : Prop) (_ : forall (_ : A) (_ : B), P)
         (_ : MLCoq.and' A B), P
MLCoq.and'_rec
     : forall (A B : Prop) (P : Set) (_ : forall (_ : A) (_ : B), P)
         (_ : MLCoq.and' A B), P
MLCoq.and'_rect
     : forall (A B : Prop) (P : Type) (_ : forall (_ : A) (_ : B), P)
         (_ : MLCoq.and' A B), P
MLCoq.and_ind
     : Prop
MLCoq.and_rec
     : Type
MLCoq.and_rect'
     : Type
MLCoq.ex1_ind
     : forall (A : Type) (P : forall _ : A, Prop) 
         (P0 : Prop) (_ : forall (x : A) (_ : P x), P0) 
         (_ : MLCoq.ex1 A P), P0
MLCoq.ex2_ind
     : forall (A : Type) (P : forall _ : A, Prop) 
         (P0 : Prop) (_ : forall (x : A) (_ : P x), P0) 
         (_ : @MLCoq.ex2 A P), P0
MLCoq.ex3_ind
     : forall (A : Type) (P : forall _ : A, Prop) 
         (P0 : Prop) (_ : forall (x : A) (_ : P x), P0) 
         (_ : @MLCoq.ex3 A P), P0
MLCoq.ex4_ind
     : forall (A : Type) (P : forall _ : A, Prop) 
         (P0 : Prop) (_ : forall (x : A) (_ : P x), P0) 
         (_ : @MLCoq.ex4 A P), P0
MLCoq.nat_ind'
     : forall (P : forall _ : nat, Prop) (_ : P O)
         (_ : forall (n : nat) (_ : P n), P (S n)) 
         (n : nat), P n
MLCoq.test
     : forall _ : Prop, Prop
MLCoq.and'
     : forall (_ : Prop) (_ : Prop), Prop
MLCoq.ex1
     : forall (A : Type) (_ : forall _ : A, Prop), Prop
MLCoq.ex2
     : forall (A : Type) (_ : forall _ : A, Prop), Prop
MLCoq.ex3
     : forall (A : Type) (_ : forall _ : A, Prop), Prop
MLCoq.ex4
     : forall (A : Type) (_ : forall _ : A, Prop), Prop
MLCoq.conj'
     : forall (A B : Prop) (_ : A) (_ : B), MLCoq.and' A B
MLCoq.ex_intro1
     : forall (A : Type) (P : forall _ : A, Prop) (x : A) (_ : P x),
       MLCoq.ex1 A P
MLCoq.ex_intro2
     : forall (A : Type) (P : forall _ : A, Prop) (x : A) (_ : P x),
       @MLCoq.ex2 A P
MLCoq.ex_intro3
     : forall (A : Type) (P : forall _ : A, Prop) (x : A) (_ : P x),
       @MLCoq.ex3 A P
MLCoq.ex_intro4
     : forall (A : Type) (P : forall _ : A, Prop) (x : A) (_ : P x),
       @MLCoq.ex4 A P
